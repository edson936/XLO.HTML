javascript // ========================================================================= // === CÓDIGO JAVASCRIPT v11.6 - COM SENHAS OFUSCADAS === // ========================================================================= // ========================================================================= // === PARTE 1: SIMULADOR DE SERVIDOR (LÓGICA DE LOGIN COM OFUSCAÇÃO) // ========================================================================= const SimulatedServer = { adminUser: 'admin', adminPass: 'YWRtaW4=', // Senha 'admin' codificada em Base64 clientDatabase: null, DB_KEY: 'marcenaria_clientes_db_v4_encoded', // Nova chave para evitar conflito com dados antigos _saveDataToLocalStorage() { try { if (this.clientDatabase) { localStorage.setItem(this.DB_KEY, JSON.stringify(this.clientDatabase)); } } catch (e) { console.error("Erro ao salvar dados no localStorage:", e); } }, init() { const savedData = localStorage.getItem(this.DB_KEY); if (savedData) { try { this.clientDatabase = JSON.parse(savedData); console.log("Banco de dados de clientes (codificado) carregado."); } catch (e) { console.error("Erro ao carregar dados, resetando para o padrão.", e); this._initializeDefaults(); } } else { console.log("Nenhum banco de dados de clientes encontrado. Criando padrão."); this._initializeDefaults(); } }, _initializeDefaults() { this.clientDatabase = { 'marcos.paulo': { pass: 'MTIz' }, // Senha '123' em Base64 'ana.costa': { pass: 'NDU2' }, // Senha '456' em Base64 }; this._saveDataToLocalStorage(); }, login(username, password) { // Login de Admin // Compara a senha digitada com a versão decodificada da senha armazenada if (username === this.adminUser && password === atob(this.adminPass)) { return { success: true, isAdmin: true }; } // Login de Cliente const userDetails = this.clientDatabase[username]; // Compara a senha digitada com a versão decodificada da senha armazenada para o cliente if (userDetails && password === atob(userDetails.pass)) { return { success: true, isAdmin: false }; } return { success: false, message: 'Usuário ou senha inválidos.' }; }, generateCredentials(clientName) { const newUsername = clientName.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "").replace(/[^a-z0-9\s]/g, '').replace(/\s+/g, '.'); const newPassword = Math.random().toString(36).slice(-8); // Salva a nova senha JÁ CODIFICADA em Base64 this.clientDatabase[newUsername] = { pass: btoa(newPassword) }; this._saveDataToLocalStorage(); // Retorna a senha em texto plano para o admin poder copiar e passar para o cliente return { username: newUsername, password: newPassword }; }, deleteUser(username) { if(this.clientDatabase[username]) { delete this.clientDatabase[username]; this._saveDataToLocalStorage(); } }, getUsersWithDetails() { // Para exibir no painel, decodifica as senhas const decodedUsers = {}; for (const user in this.clientDatabase) { decodedUsers[user] = { pass: atob(this.clientDatabase[user].pass) }; } return decodedUsers; } }; // =================================================================================== // PARTE 2: JAVASCRIPT v11.6 - APLICAÇÃO PRINCIPAL DE MARCENARIA // =================================================================================== const MarcenariaApp = { PRECO_MDF_INTERNO_M2: 90.00, PRECO_MDF_EXTERNO_M2: 150.00, PRECO_FITA_BORDA_M: 3.50, ESPESSURA_FUNDO: 6, FOLGA_PORTA: 3, FOLGA_CORREDICA: 26, // Folga necessária para corrediças de gaveta (distância entre a lateral e a caixa da gaveta) RECUO_FUNDO: 10, // Recuo do fundo em relação à profundidade total do módulo DB_STORAGE_KEY: 'marcenaria_modulosDB_v11', // Chave para salvar módulos criados modulosDB: {}, // Armazena os módulos criados pelo usuário modulosProjeto: [], // Módulos adicionados ao projeto atual categoriaAtiva: '', // Categoria atualmente selecionada nos botões dadosRelatorioAtual: {}, // Armazena os dados do último relatório gerado // Variáveis para o popup editor de fórmulas currentlyEditingInput: null, popupEditor: null, popupTextarea: null, // Variáveis para o Criador Avançado formCriador: null, listaPecasDiv: null, listaFerragensDiv: null, modulosSalvosSelect: null, creatorIdInput: null, creatorNomeInput: null, categoriaSelect: null, categoriaNovoInput: null, // Variáveis para a Aplicação Principal (Adicionar Módulo) botoesCategoriaContainer: null, moduloSelecionadoSelect: null, detalhesModuloDiv: null, modulosAdicionadosContainer: null, nenhumModuloMsgP: null, relatorioContainerDiv: null, botoesExportarDiv: null, // Variáveis para o Modal de Orçamento Cliente modalOrcamentoCliente: null, orcamentoClienteContent: null, // Variáveis para o Montador Rápido builderNomeInput: null, builderCategoriaInput: null, listaComponentesDiv: null, listaPecasMontadorRapidoDiv: null, listaFerragensMontadorRapidoDiv: null, componentesMontadorSelecionados: [], // Para guardar os componentes selecionados e suas quantidades/parâmetros pecasMontadorRapido: [], ferragensMontadorRapido: [], // Definição dos componentes padrão componenteLibrary: { caixaInferior: { label: "CAIXA | Módulo Inferior (Balcão)", geraPecas: (vars) => [ { nome: 'Base Principal', qtd: 1, alturaFormula: 'P - (2 * espMDFInterno)', larguraFormula: `L - (2 * espMDFInterno)`, material: 'interno', fitaCor: '{}', fitas: { a1: false, a2: false, l1: true, l2: false } }, { nome: 'Lateral Caixa', qtd: 2, alturaFormula: 'A', larguraFormula: `P - ${MarcenariaApp.RECUO_FUNDO}`, material: 'interno', fitaCor: '{}', fitas: { a1: true, a2: true, l1: true, l2: false } }, // Apenas a frente da lateral recebe fita { nome: 'Travessa Frontal', qtd: 1, alturaFormula: '100', larguraFormula: `L - (2 * espMDFInterno)`, material: 'interno', fitaCor: '{}', fitas: {a1: true, a2: false, l1: false, l2: false} }, { nome: 'Travessa Traseira', qtd: 1, alturaFormula: '100', larguraFormula: `L - (2 * espMDFInterno)`, material: 'interno', fitaCor: '{}', fitas: {} }, { nome: 'Fundo (6mm)', qtd: 1, alturaFormula: `A - 5`, larguraFormula: `L - 5`, material: 'interno', fitaCor: '', fitas: {} } // Fundo 6mm ], geraFerragens: (vars) => [ { tipo: 'unidade', item: 'Parafuso 4.0x40mm (montagem cx)', formula: '8', preco: 0.20 }, { tipo: 'unidade', item: 'Parafuso 5.0x50mm (fixação parede)', formula: '4', preco: 0.30 }, { tipo: 'unidade', item: 'Bucha 8mm (fixação parede)', formula: '4', preco: 0.25 }, { tipo: 'unidade', item: 'Dobradiça Reta 35mm (Porta Padrão)', formula: '2', preco: 5.50 } // Adicionando uma dobradiça padrão ] }, caixaSuperior: { label: "CAIXA | Módulo Superior (Aéreo)", geraPecas: (vars) => [ { nome: 'Lateral Caixa', qtd: 2, alturaFormula: 'A', larguraFormula: `P - ${MarcenariaApp.RECUO_FUNDO}`, material: 'interno', fitaCor: '{}', fitas: { a1: true, a2: true, l1: true, l2: false } }, { nome: 'Base Inferior', qtd: 1, alturaFormula: `P - ${MarcenariaApp.RECUO_FUNDO}`, larguraFormula: `L - (2 * espMDFInterno)`, material: 'interno', fitaCor: '{}', fitas: { a1: false, a2: false, l1: true, l2: false } }, { nome: 'Base Superior', qtd: 1, alturaFormula: `P - ${MarcenariaApp.RECUO_FUNDO}`, larguraFormula: `L - (2 * espMDFInterno)`, material: 'interno', fitaCor: '{}', fitas: {} }, { nome: 'Fundo (6mm)', qtd: 1, alturaFormula: `A - 5`, larguraFormula: `L - 5`, material: 'interno', fitaCor: '', fitas: {} } ], geraFerragens: (vars) => [ { tipo: 'unidade', item: 'Parafuso 4.0x40mm (montagem cx)', formula: '8', preco: 0.20 }, { tipo: 'unidade', item: 'Parafuso 5.0x50mm (fixação parede)', formula: '4', preco: 0.30 }, { tipo: 'unidade', item: 'Bucha 8mm (fixação parede)', formula: '4', preco: 0.25 }, { tipo: 'unidade', item: 'Dobradiça Reta 35mm (Porta Padrão)', formula: '2', preco: 5.50 } // Adicionando uma dobradiça padrão ] }, portasGiro: { label: "EXTERNO | Porta(s) de Giro", geraPecas: (vars) => [{ nome: `Porta de Giro`, qtd: vars.qtd, alturaFormula: `A - ${MarcenariaApp.FOLGA_PORTA}`, larguraFormula: `(L - (${vars.qtd} * ${MarcenariaApp.FOLGA_PORTA}) - ${MarcenariaApp.FOLGA_PORTA}) / ${vars.qtd}`, material: 'externo', fitaCor: '{}', fitas: { a1: true, a2: true, l1: true, l2: true } }], geraFerragens: (vars) => [ { tipo: 'unidade', item: 'Dobradiça Reta 35mm', formula: `${vars.qtd} * 2`, preco: 5.50 }, { tipo: 'unidade', item: 'Parafuso 1.6x16mm (fix. dobradiça)', formula: `${vars.qtd} * 8`, preco: 0.15 }, { tipo: 'unidade', item: 'Puxador', formula: `${vars.qtd}`, preco: 15.00 } ] }, frenteGaveta: { label: "EXTERNO | Frente(s) de Gaveta", params: [{ id: 'alturas', label: 'Alturas (separadas por vírgula)', placeholder: 'Ex: 150, 150, 300' }], geraPecas: (vars) => { const alturas = vars.params.alturas.split(',').map(h => parseFloat(h.trim())); return alturas.filter(h => !isNaN(h)).map((alt, i) => ({ nome: `Frente Gaveta ${i + 1}`, qtd: 1, alturaFormula: `${alt} - ${MarcenariaApp.FOLGA_PORTA}`, // Use 'alt' directly larguraFormula: `L - ${MarcenariaApp.FOLGA_PORTA}`, material: 'externo', fitaCor: '{}', fitas: { a1: true, a2: true, l1: true, l2: true } })); }, geraFerragens: (vars) => { const qtdGavetas = vars.params.alturas.split(',').filter(h => h.trim() !== '').length; if (qtdGavetas === 0) return []; return [ { tipo: 'unidade', item: 'Puxador', formula: `${qtdGavetas}`, preco: 15.00 } // Use `qtdGavetas` directly ]; } }, lateralAcabamento: { label: "EXTERNO | Lateral de Acabamento (Vista)", geraPecas: (vars) => [{ nome: 'Lateral de Acabamento', qtd: vars.qtd, alturaFormula: 'A', larguraFormula: 'P', material: 'externo', fitaCor: '{}', fitas: { a1: true, a2: true, l1: true, l2: true } }] }, batente: { label: "EXTERNO | Batente", geraPecas: (vars) => [{ nome: 'Batente', qtd: vars.qtd, alturaFormula: 'A', larguraFormula: '50', material: 'externo', fitaCor: '{}', fitas: { a1: true, a2: true, l1: true, l2: true } }] }, baseAcabamento: { label: "EXTERNO | Base de Acabamento (Rodapé)", geraPecas: (vars) => [{ nome: 'Base de Acabamento', qtd: 1, alturaFormula: '150', larguraFormula: 'L', material: 'externo', fitaCor: '{}', fitas: { a1: true, a2: false, l1: true, l2: true } }] }, frenteFalsa: { label: "EXTERNO | Frente Falsa (Fixa)", geraPecas: (vars) => [{ nome: 'Frente Falsa Fixa', qtd: vars.qtd, alturaFormula: `A - ${MarcenariaApp.FOLGA_PORTA}`, larguraFormula: `L - ${MarcenariaApp.FOLGA_PORTA}`, material: 'externo', fitaCor: '{}', fitas: { a1: true, a2: true, l1: true, l2: true } }] }, kitGaveta: { label: "INTERNO | Gaveta Completa (Kit)", params: [{ id: 'alturas', label: 'Alturas das Frentes (separadas por vírgula)', placeholder: 'Ex: 150, 150, 300' }], geraPecas: (vars) => { const alturasFrente = vars.params.alturas.split(',').map(h => parseFloat(h.trim())); let pecas = []; alturasFrente.filter(h => !isNaN(h)).forEach((altFrente, i) => { const alturaCaixaGaveta = altFrente - 50; // Aproximação: 50mm menor que a frente para 2 lados (base e superior) pecas.push( { nome: `Lateral Gaveta ${i+1}`, qtd: 2, alturaFormula: `${alturaCaixaGaveta}`, larguraFormula: `P - ${MarcenariaApp.RECUO_FUNDO} - ${MarcenariaApp.FOLGA_CORREDICA}`, material: 'interno', fitaCor: '{}', fitas: { a1: true, a2: false, l1: false, l2: false } }, { nome: `Frente/Trás Gaveta ${i+1}`, qtd: 2, alturaFormula: `${alturaCaixaGaveta}`, larguraFormula: `L - (2 * espMDFInterno) - ${MarcenariaApp.FOLGA_CORREDICA}`, material: 'interno', fitaCor: '{}', fitas: { a1: true, a2: true, l1: false, l2: false } }, { nome: `Fundo Gaveta 6mm ${i+1}`, qtd: 1, alturaFormula: `(L - (2 * espMDFInterno) - ${MarcenariaApp.FOLGA_CORREDICA}) - 5`, larguraFormula: `P - ${MarcenariaApp.RECUO_FUNDO} - ${MarcenariaApp.FOLGA_CORREDICA} - 5`, material: 'interno', fitaCor: '', fitas: {} } ); }); return pecas; }, geraFerragens: (vars) => { const qtdGavetas = vars.params.alturas.split(',').filter(h => h.trim() !== '').length; if (qtdGavetas === 0) return []; return [ { tipo: 'unidade', item: 'Corrediça Telescópica (Par)', formula: `${qtdGavetas}`, preco: 25.00 }, // Use `qtdGavetas` directly { tipo: 'unidade', item: 'Parafuso 4.0x40mm (montagem gav.)', formula: `${qtdGavetas} * 8`, preco: 0.20 }, // Use `qtdGavetas` directly { tipo: 'unidade', item: 'Parafuso 1.6x16mm (fix. corrediça)', formula: `${qtdGavetas} * 8`, preco: 0.15 } // Use `qtdGavetas` directly ]; } }, prateleira: { label: "INTERNO | Prateleira", geraPecas: (vars) => [{ nome: 'Prateleira', qtd: vars.qtd, alturaFormula: `P - ${MarcenariaApp.RECUO_FUNDO}`, larguraFormula: `L - (2 * espMDFInterno)`, material: 'interno', fitaCor: '{}', fitas: { a1: false, a2: false, l1: true, l2: false } }] }, divisaoInterna: { label: "INTERNO | Divisão Vertical", geraPecas: (vars) => [{ nome: 'Divisão Vertical Interna', qtd: vars.qtd, alturaFormula: `A - (2 * espMDFInterno)`, larguraFormula: `P - ${MarcenariaApp.RECUO_FUNDO}`, material: 'interno', fitaCor: '{}', fitas: { a1: false, a2: false, l1: true, l2: false } }] }, reguaVertical: { label: "INTERNO | Régua Vertical", geraPecas: (vars) => [{ nome: 'Régua Vertical Interna', qtd: vars.qtd, alturaFormula: `A - (2 * espMDFInterno)`, larguraFormula: '100', material: 'interno', fitaCor: '{}', fitas: {} }] }, fundoInterno: { label: "INTERNO | Fundo de Caixa (Adicional)", geraPecas: (vars) => [{ nome: 'Fundo Caixa 6mm', qtd: vars.qtd, alturaFormula: `A - 5`, larguraFormula: `L - 5`, material: 'interno', fitaCor: '', fitas: {} }] } }, // --- INITIALIZATION --- init() { this._setupDOMElements(); this.botoesExportarDiv.style.display = 'none'; // Esconder botões de exportação inicialmente this.relatorioContainerDiv.innerHTML = ''; // Limpa container de relatório this.carregarModulosDB(); this.renderBotoesCategorias(); this.exibirModulosAdicionados(); // Exibe módulos do projeto ao carregar this.bindUIEvents(); }, _setupDOMElements() { // App elements this.clienteInput = document.getElementById('cliente'); this.maoDeObraPercInput = document.getElementById('mao-de-obra-perc'); this.margemInput = document.getElementById('margem'); this.corPadraoInternaInput = document.getElementById('cor-padrao-interna'); this.espPadraoInternaInput = document.getElementById('esp-padrao-interna'); this.corPadraoExternaInput = document.getElementById('cor-padrao-externa'); this.espPadraoExternaInput = document.getElementById('esp-padrao-extera'); this.ambienteInput = document.getElementById('ambiente'); this.botoesCategoriaContainer = document.querySelector('.botoes-categoria'); this.moduloSelecionadoSelect = document.getElementById('modulo-selecionado'); this.detalhesModuloDiv = document.getElementById('detalhes-modulo'); this.larguraInput = document.getElementById('largura'); this.profundidadeInput = document.getElementById('profundidade'); this.alturaInput = document.getElementById('altura'); this.addModuloBtn = document.getElementById('add-modulo-btn'); this.modulosAdicionadosContainer = document.getElementById('modulos-adicionados'); this.nenhumModuloMsgP = document.getElementById('nenhum-modulo-msg'); this.gerarBtn = document.getElementById('gerar-btn'); this.relatorioContainerDiv = document.getElementById('relatorio-container'); this.botoesExportarDiv = document.getElementById('botoes-exportar'); this.appLogoutButton = document.getElementById('app-logout-button'); // Modals this.modalMontadorRapido = document.getElementById('modal-montador-rapido'); this.modalCriador = document.getElementById('modal-criador'); this.modalOrcamentoCliente = document.getElementById('modal-orcamento-cliente'); this.orcamentoClienteContent = document.getElementById('orcamento-cliente-content'); // Popup Editor this.popupEditor = document.getElementById('popup-editor'); this.popupTextarea = document.getElementById('popup-editor-textarea'); this.popupEditorSaveBtn = document.getElementById('popup-editor-save'); this.popupEditorCancelBtn = document.getElementById('popup-editor-cancel'); // Advanced Creator elements this.formCriador = document.getElementById('form-criador'); this.listaPecasDiv = document.getElementById('lista-pecas-criador'); this.listaFerragensDiv = document.getElementById('lista-ferragens-criador'); this.modulosSalvosSelect = document.getElementById('modulos-salvos'); this.creatorIdInput = document.getElementById('creator-id'); this.creatorNomeInput = document.getElementById('creator-nome'); this.categoriaSelect = document.getElementById('creator-categoria-select'); this.categoriaNovoInput = document.getElementById('creator-categoria-novo'); // Quick Builder elements this.builderNomeInput = document.getElementById('builder-nome'); this.builderCategoriaInput = document.getElementById('builder-categoria'); this.listaComponentesDiv = document.getElementById('lista-componentes'); this.listaPecasMontadorRapidoDiv = document.getElementById('lista-pecas-montador-rapido'); this.listaFerragensMontadorRapidoDiv = document.getElementById('lista-ferragens-montador-rapido'); }, // --- LOGIN/LOGOUT --- showApp() { document.getElementById('login-wrapper').style.display = 'none'; document.getElementById('app-wrapper').style.display = 'block'; }, showLogin() { document.getElementById('app-wrapper').style.display = 'none'; document.getElementById('login-wrapper').style.display = 'flex'; document.getElementById('login-screen').style.display = 'block'; document.getElementById('admin-screen').style.display = 'none'; document.getElementById('username').value = ''; document.getElementById('password').value = ''; document.getElementById('error-message').textContent = ''; }, loginSuccess(isAdmin) { if (isAdmin) { document.getElementById('login-screen').style.display = 'none'; document.getElementById('admin-screen').style.display = 'block'; this.updateUserList(); } else { this.showApp(); } }, logout() { this.showLogin(); }, // --- DATA MANAGEMENT (MODULES) --- carregarModulosDB() { try { const savedDB = localStorage.getItem(this.DB_STORAGE_KEY); this.modulosDB = savedDB ? JSON.parse(savedDB) : {}; } catch (e) { console.error("Erro ao carregar módulos salvos:", e); this.modulosDB = {}; // Resetar em caso de erro no parse } }, salvarModulosDB() { try { localStorage.setItem(this.DB_STORAGE_KEY, JSON.stringify(this.modulosDB)); } catch (e) { console.error("Erro ao salvar módulos:", e); alert("Erro ao salvar módulos. Verifique o espaço de armazenamento do navegador."); } }, // --- UI EVENT BINDING --- bindUIEvents() { this.addModuloBtn.addEventListener('click', () => this.addModuloAoProjeto()); this.gerarBtn.addEventListener('click', () => this.gerarRelatorio()); this.appLogoutButton.addEventListener('click', () => this.logout()); // Categoria buttons for adding modules this.botoesCategoriaContainer.addEventListener('click', (event) => { if (event.target.tagName === 'BUTTON') { this.selecionarCategoria(event.target.dataset.categoria); } }); // Popup editor events this.popupEditorSaveBtn.addEventListener('click', () => this.fecharEditorPopup(true)); this.popupEditorCancelBtn.addEventListener('click', () => this.fecharEditorPopup(false)); // Make modals draggable this._makeDraggable(this.modalMontadorRapido.querySelector('.modal-header'), this.modalMontadorRapido); this._makeDraggable(this.modalCriador.querySelector('.modal-header'), this.modalCriador); this._makeDraggable(this.modalOrcamentoCliente.querySelector('.modal-header'), this.modalOrcamentoCliente); }, _makeDraggable(handleElement, dragElement) { let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; handleElement.onmousedown = dragMouseDown; function dragMouseDown(e) { e = e || window.event; // e.preventDefault(); // Get the mouse cursor position at startup: pos3 = e.clientX; pos4 = e.clientY; document.onmouseup = closeDragElement; // Call a function whenever the cursor moves: document.onmousemove = elementDrag; } function elementDrag(e) { e = e || window.event; e.preventDefault(); // Calculate the new cursor position: pos1 = pos3 - e.clientX; pos2 = pos4 - e.clientY; pos3 = e.clientX; pos4 = e.clientY; // Set the element's new position: dragElement.style.top = (dragElement.offsetTop - pos2) + "px"; dragElement.style.left = (dragElement.offsetLeft - pos1) + "px"; } function closeDragElement() { // Stop moving when mouse button is released: document.onmouseup = null; document.onmousemove = null; } }, // --- MAIN APPLICATION MODULE SECTION --- renderBotoesCategorias() { this.botoesCategoriaContainer.innerHTML = ''; const categorias = new Set(); categorias.add('Módulos Padrão'); // Always have this default category for (const id in this.modulosDB) { categorias.add(this.modulosDB[id].categoria); } categorias.forEach(cat => { const button = document.createElement('button'); button.dataset.categoria = cat; button.textContent = cat; this.botoesCategoriaContainer.appendChild(button); }); // Select the default category after rendering this.selecionarCategoria('Módulos Padrão'); }, selecionarCategoria(categoria) { this.categoriaAtiva = categoria; // Update active class this.botoesCategoriaContainer.querySelectorAll('button').forEach(btn => { btn.classList.remove('active'); if (btn.dataset.categoria === categoria) { btn.classList.add('active'); } }); this.carregarModulosPelaCategoria(); this.toggleDetailsModulo(true); // Always show details when a category is selected }, carregarModulosPelaCategoria() { this.moduloSelecionadoSelect.innerHTML = '<option value="">-- Selecione um módulo --</option>'; let modulosParaExibir = []; if (this.categoriaAtiva === 'Módulos Padrão') { // Adiciona componentes padrão como módulos for (const key in this.componenteLibrary) { const comp = this.componenteLibrary[key]; // Criar um "módulo" temporário para seleção, sem salvá-lo no DB modulosParaExibir.push({ id: `std-${key}`, // Use component key for ID nome: comp.label, categoria: 'Módulos Padrão', pecas: comp.geraPecas ? [{ nome: 'Gerado automaticamente', alturaFormula: 'A', larguraFormula: 'L', qtd: 1, material: 'interno', fitaCor: '{}', fitas: {} }] : [], // Placeholder ferragens: comp.geraFerragens ? [{ tipo: 'unidade', item: 'Gerado automaticamente', formula: 1, preco: 0 }] : [], // Placeholder isStandard: true, // Flag para identificar módulos padrão componentKey: key // Chave para referenciar o componente na library }); } } else { for (const id in this.modulosDB) { if (this.modulosDB[id].categoria === this.categoriaAtiva) { modulosParaExibir.push(this.modulosDB[id]); } } } modulosParaExibir.sort((a, b) => a.nome.localeCompare(b.nome)).forEach(mod => { const option = document.createElement('option'); option.value = mod.id; option.textContent = mod.nome; this.moduloSelecionadoSelect.appendChild(option); }); if (modulosParaExibir.length === 0 && this.categoriaAtiva !== 'Módulos Padrão') { alert(`Nenhum módulo encontrado na categoria "${this.categoriaAtiva}". Considere criar um novo.`); } }, toggleDetailsModulo(show) { this.detalhesModuloDiv.style.display = show ? 'block' : 'none'; if (!show) { this.limparCamposModulo(); } }, limparCamposModulo() { this.moduloSelecionadoSelect.value = ''; this.larguraInput.value = ''; this.profundidadeInput.value = ''; this.alturaInput.value = ''; }, addModuloAoProjeto() { const moduloId = this.moduloSelecionadoSelect.value; const largura = parseFloat(this.larguraInput.value); const profundidade = parseFloat(this.profundidadeInput.value); const altura = parseFloat(this.alturaInput.value); const ambiente = this.ambienteInput.value.trim(); if (!moduloId || !largura || !profundidade || !altura || !ambiente) { alert('Por favor, selecione um módulo e preencha todas as dimensões e o ambiente.'); return; } const moduloInfo = this.moduloSelecionadoSelect.options[this.moduloSelecionadoSelect.selectedIndex]; const moduloNome = moduloInfo.textContent; let moduloOriginal; let isStandard = false; let componentKey = null; if (moduloId.startsWith('std-')) { isStandard = true; componentKey = moduloId.substring(4); // "std-caixaInferior" -> "caixaInferior" moduloOriginal = { nome: this.componenteLibrary[componentKey].label, pecas: [], // Serão geradas sob demanda ferragens: [], // Serão geradas sob demanda isStandardComponent: true, componentKey: componentKey }; } else { moduloOriginal = this.modulosDB[moduloId]; if (!moduloOriginal) { alert('Módulo não encontrado na base de dados.'); return; } } const novoModulo = { id: Date.now() + Math.random().toString(36).substring(2, 9), // ID único nome: moduloOriginal.nome, ambiente: ambiente, largura: largura, profundidade: profundidade, altura: altura, pecas: JSON.parse(JSON.stringify(moduloOriginal.pecas || [])), // Clonar peças e ferragens para não alterar o original ferragens: JSON.parse(JSON.stringify(moduloOriginal.ferragens || [])), isStandardComponent: isStandard, componentKey: componentKey }; this.modulosProjeto.push(novoModulo); this.exibirModulosAdicionados(); this.limparCamposModulo(); this.ambienteInput.value = ambiente; // Keeps the environment }, exibirModulosAdicionados() { this.modulosAdicionadosContainer.innerHTML = '<h3>Módulos no Projeto:</h3>'; if (this.modulosProjeto.length === 0) { this.modulosAdicionadosContainer.innerHTML += '<p id="nenhum-modulo-msg">Nenhum módulo adicionado ainda.</p>'; } else { this.modulosProjeto.forEach((modulo, index) => { const moduloDiv = document.createElement('div'); moduloDiv.classList.add('modulo-item'); moduloDiv.innerHTML = ` <span> <strong>${modulo.nome}</strong> (L: ${modulo.largura}mm, P: ${modulo.profundidade}mm, A: ${modulo.altura}mm) - Ambiente: ${modulo.ambiente} </span> <button data-index="${index}">Remover</button> `; moduloDiv.querySelector('button').addEventListener('click', (event) => { this.removerModuloProjeto(parseInt(event.target.dataset.index)); }); this.modulosAdicionadosContainer.appendChild(moduloDiv); }); } }, removerModuloProjeto(index) { this.modulosProjeto.splice(index, 1); this.exibirModulosAdicionados(); }, // --- QUICK BUILDER MODAL (MONTADOR RÁPIDO) --- abrirMontadorRapido() { this.modalMontadorRapido.style.display = 'block'; // Reset the form document.getElementById('form-montador').reset(); this.pecasMontadorRapido = []; this.ferragensMontadorRapido = []; this.componentesMontadorSelecionados = []; this._renderPecasMontador(); this._renderFerragensMontador(); this._renderComponentesPadrao(); }, fecharMontadorRapido() { this.modalMontadorRapido.style.display = 'none'; }, _renderComponentesPadrao() { this.listaComponentesDiv.innerHTML = ''; for (const key in this.componenteLibrary) { const comp = this.componenteLibrary[key]; const div = document.createElement('div'); div.classList.add('component-row'); if (comp.params) { // If component has parameters, render an input for them const paramsHtml = comp.params.map(p => ` <div class="form-group" style="margin-bottom: 0;"> <input type="text" id="comp-param-${key}-${p.id}" placeholder="${p.placeholder || p.label}" data-param-id="${p.id}" data-component-key="${key}" style="border: 1px solid #ccc; border-radius: 4px; padding: 6px; font-size: 0.9em;"> </div> `).join(''); div.innerHTML = ` <input type="checkbox" id="comp-${key}" data-component-key="${key}"> <label for="comp-${key}">${comp.label}</label> <input type="number" id="comp-qtd-${key}" value="1" min="1" style="width: 60px;"> <div class="form-group" style="display:flex; flex-direction:row; gap:10px;">${paramsHtml}</div> `; } else { div.innerHTML = ` <input type="checkbox" id="comp-${key}" data-component-key="${key}"> <label for="comp-${key}">${comp.label}</label> <input type="number" id="comp-qtd-${key}" value="1" min="1" ${comp.params ? 'disabled' : ''} style="width: 60px;"> <div></div> `; } this.listaComponentesDiv.appendChild(div); } // Add event listeners to update componentesMontadorSelecionados this.listaComponentesDiv.querySelectorAll('input[type="checkbox"]').forEach(checkbox => { checkbox.addEventListener('change', (e) => { const key = e.target.dataset.componentKey; const qtyInput = document.getElementById(`comp-qtd-${key}`); const paramsInputs = this.listaComponentesDiv.querySelectorAll(`[data-component-key="${key}"][data-param-id]`); if (e.target.checked) { qtyInput.disabled = false; paramsInputs.forEach(input => input.disabled = false); this._updateSelectedComponent(key, parseInt(qtyInput.value), this._getParamsFromInputs(key)); } else { qtyInput.disabled = true; paramsInputs.forEach(input => input.disabled = true); this.componentesMontadorSelecionados = this.componentesMontadorSelecionados.filter(c => c.key !== key); } }); }); this.listaComponentesDiv.querySelectorAll('input[type="number"]').forEach(input => { input.addEventListener('change', (e) => { const key = e.target.dataset.componentKey || e.target.id.replace('comp-qtd-', ''); if (document.getElementById(`comp-${key}`).checked) { this._updateSelectedComponent(key, parseInt(e.target.value), this._getParamsFromInputs(key)); } }); }); this.listaComponentesDiv.querySelectorAll('input[type="text"]').forEach(input => { input.addEventListener('input', (e) => { const key = e.target.dataset.componentKey; if (document.getElementById(`comp-${key}`).checked) { this._updateSelectedComponent(key, parseInt(document.getElementById(`comp-qtd-${key}`).value), this._getParamsFromInputs(key)); } }); }); }, _getParamsFromInputs(componentKey) { const params = {}; this.listaComponentesDiv.querySelectorAll(`[data-component-key="${componentKey}"][data-param-id]`).forEach(input => { params[input.dataset.paramId] = input.value; }); return params; }, _updateSelectedComponent(key, qty, params) { const existingIndex = this.componentesMontadorSelecionados.findIndex(c => c.key === key); if (existingIndex > -1) { this.componentesMontadorSelecionados[existingIndex] = { key, qty, params }; } else { this.componentesMontadorSelecionados.push({ key, qty, params }); } }, gerarPecasPadraoNoMontador() { const L = parseFloat(this.larguraInput.value) || 0; const A = parseFloat(this.alturaInput.value) || 0; const P = parseFloat(this.profundidadeInput.value) || 0; const espMDFInterno = parseFloat(this.espPadraoInternaInput.value) || 0; const espMDFExterno = parseFloat(this.espPadraoExternaInput.value) || 0; const folgaPorta = MarcenariaApp.FOLGA_PORTA; const folgaCorredica = MarcenariaApp.FOLGA_CORREDICA; this.pecasMontadorRapido = []; this.ferragensMontadorRapido = []; this.componentesMontadorSelecionados.forEach(selectedComp => { const compDef = this.componenteLibrary[selectedComp.key]; const vars = { L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica, qtd: selectedComp.qty, params: selectedComp.params // Pass any specific parameters }; if (compDef && compDef.geraPecas) { const newPecas = compDef.geraPecas(vars); newPecas.forEach(p => { // Check if a piece with the same name and formulas already exists const existingPiece = this.pecasMontadorRapido.find(ep => ep.nome === p.nome && ep.alturaFormula === p.alturaFormula && ep.larguraFormula === p.larguraFormula && ep.material === p.material ); if (existingPiece) { existingPiece.qtd += p.qtd; // Aggregate quantities } else { // Ensure fitaCor and fitas are objects p.fitaCor = p.fitaCor || '{}'; p.fitas = p.fitas || {}; p.fitas.a1 = typeof p.fitas.a1 === 'boolean' ? p.fitas.a1 : false; p.fitas.a2 = typeof p.fitas.a2 === 'boolean' ? p.fitas.a2 : false; p.fitas.l1 = typeof p.fitas.l1 === 'boolean' ? p.fitas.l1 : false; p.fitas.l2 = typeof p.fitas.l2 === 'boolean' ? p.fitas.l2 : false; this.pecasMontadorRapido.push(p); } }); } if (compDef && compDef.geraFerragens) { const newFerragens = compDef.geraFerragens(vars); newFerragens.forEach(f => { const formulaValue = this.avaliarFormula(f.formula.toString(), L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica, (selectedComp.params && selectedComp.params.alturas) ? selectedComp.params.alturas.split(',').filter(h => h.trim() !== '').length : selectedComp.qty); // Pass appropriate valorAuxiliar const existingFerragem = this.ferragensMontadorRapido.find(ef => ef.item === f.item && ef.tipo === f.tipo ); if (existingFerragem) { existingFerragem.formula = parseFloat(existingFerragem.formula) + formulaValue; existingFerragem.preco += f.preco; // Add prices if aggregation, or set if unique item (logic depends on desired behavior) } else { this.ferragensMontadorRapido.push({ ...f, formula: formulaValue}); // Store calculated value } }); } }); this._renderPecasMontador(); this._renderFerragensMontador(); }, _renderPecasMontador() { this.listaPecasMontadorRapidoDiv.innerHTML = ''; this.pecasMontadorRapido.forEach((peca, index) => { const row = document.createElement('div'); row.classList.add('piece-row'); const fitaCorValue = peca.fitaCor === '{}' ? '' : peca.fitaCor; row.innerHTML = ` <input type="text" value="${peca.nome}" placeholder="Nome da Peça" data-field="nome"> <input type="number" value="${peca.qtd}" min="1" data-field="qtd" class="small-input"> <input type="text" value="${peca.alturaFormula}" placeholder="Fórmula Altura (mm)" data-field="alturaFormula"> <input type="text" value="${peca.larguraFormula}" placeholder="Fórmula Largura (mm)" data-field="larguraFormula"> <select data-field="material"> <option value="interno" ${peca.material === 'interno' ? 'selected' : ''}>Interno</option> <option value="externo" ${peca.material === 'externo' ? 'selected' : ''}>Externo</option> </select> <div class="fitas-group"> <label><input type="checkbox" ${peca.fitas.a1 ? 'checked' : ''} data-fita="a1"> A1</label> <label><input type="checkbox" ${peca.fitas.a2 ? 'checked' : ''} data-fita="a2"> A2</label> <label><input type="checkbox" ${peca.fitas.l1 ? 'checked' : ''} data-fita="l1"> L1</label> <label><input type="checkbox" ${peca.fitas.l2 ? 'checked' : ''} data-fita="l2"> L2</label> <input type="text" value="${fitaCorValue}" placeholder="Cor Fita" data-field="fitaCor"> </div> <button onclick="MarcenariaApp.removerPecaMontador(${index})" style="background-color: var(--cor-erro);">Remover</button> `; this.listaPecasMontadorRapidoDiv.appendChild(row); this._addEventListenersToPieceRow(row, index, 'montador'); }); }, adicionarPecaNoMontador() { this.pecasMontadorRapido.push({ nome: 'Nova Peça', qtd: 1, alturaFormula: '300', larguraFormula: '400', material: 'interno', fitaCor: '{}', fitas: { a1: false, a2: false, l1: false, l2: false } }); this._renderPecasMontador(); }, removerPecaMontador(index) { this.pecasMontadorRapido.splice(index, 1); this._renderPecasMontador(); }, _renderFerragensMontador() { this.listaFerragensMontadorRapidoDiv.innerHTML = ''; this.ferragensMontadorRapido.forEach((ferragem, index) => { const row = document.createElement('div'); row.classList.add('hardware-row'); row.innerHTML = ` <input type="text" value="${ferragem.item}" placeholder="Nome da Ferragem" data-field="item"> <input type="number" step="0.01" value="${ferragem.preco}" min="0" placeholder="Preço Unit." data-field="preco"> <input type="text" value="${ferragem.formula}" placeholder="Fórmula Qtd/Metros" data-field="formula"> <button onclick="MarcenariaApp.removerFerragemMontador(${index})" style="background-color: var(--cor-erro);">Remover</button> `; this.listaFerragensMontadorRapidoDiv.appendChild(row); this._addEventListenersToHardwareRow(row, index, 'montador'); }); }, adicionarFerragemUnidadeNoMontador() { this.ferragensMontadorRapido.push({ tipo: 'unidade', item: 'Nova Ferragem (un)', formula: '1', preco: 1.00 }); this._renderFerragensMontador(); }, adicionarPuxadorBarraNoMontador() { this.ferragensMontadorRapido.push({ tipo: 'metro', item: 'Puxador Perfil (m)', formula: '0.5', preco: 20.00 }); this._renderFerragensMontador(); }, removerFerragemMontador(index) { this.ferragensMontadorRapido.splice(index, 1); this._renderFerragensMontador(); }, salvarModuloRapido() { const nome = this.builderNomeInput.value.trim(); const categoria = this.builderCategoriaInput.value.trim(); if (!nome || !categoria) { alert('Por favor, preencha o nome e a categoria do módulo.'); return; } const modulo = { id: Date.now().toString(), // Simple ID for new modules nome: nome, categoria: categoria, pecas: JSON.parse(JSON.stringify(this.pecasMontadorRapido)), // Deep copy ferragens: JSON.parse(JSON.stringify(this.ferragensMontadorRapido)) // Deep copy }; this.modulosDB[modulo.id] = modulo; this.salvarModulosDB(); this.renderBotoesCategorias(); // Atualiza a lista de categorias e módulos alert(`Módulo "${nome}" salvo com sucesso na categoria "${categoria}"!`); this.fecharMontadorRapido(); }, // --- ADVANCED CREATOR MODAL --- abrirModalCriador() { this.modalCriador.style.display = 'block'; this.atualizarListaModulosSalvos(); this.limparFormularioCriador(); this.formCriador.style.display = 'none'; // Hide form until user selects/creates }, fecharModalCriador() { this.modalCriador.style.display = 'none'; }, atualizarListaModulosSalvos() { this.modulosSalvosSelect.innerHTML = '<option value="">-- Selecione para editar --</option>'; const categories = {}; for (const id in this.modulosDB) { const modulo = this.modulosDB[id]; if (!categories[modulo.categoria]) { categories[modulo.categoria] = []; } categories[modulo.categoria].push(modulo); } const sortedCategories = Object.keys(categories).sort(); sortedCategories.forEach(catName => { const optgroup = document.createElement('optgroup'); optgroup.label = catName; categories[catName].sort((a,b) => a.nome.localeCompare(b.nome)).forEach(modulo => { const option = document.createElement('option'); option.value = modulo.id; option.textContent = modulo.nome; optgroup.appendChild(option); }); this.modulosSalvosSelect.appendChild(optgroup); }); // Populate category dropdown for new module creation this.categoriaSelect.innerHTML = '<option value="">-- Selecione ou digite nova --</option>'; sortedCategories.forEach(catName => { const option = document.createElement('option'); option.value = catName; option.textContent = catName; this.categoriaSelect.appendChild(option); }); this.categoriaSelect.innerHTML += '<option value="____NOVA_CATEGORIA____">** NOVA CATEGORIA **</option>'; }, carregarModuloParaEdicao() { const moduloId = this.modulosSalvosSelect.value; if (!moduloId) { alert('Por favor, selecione um módulo para carregar.'); return; } const modulo = this.modulosDB[moduloId]; if (modulo) { this.creatorIdInput.value = modulo.id; this.creatorNomeInput.value = modulo.nome; this.categoriaSelect.value = modulo.categoria; this.toggleNovaCategoria(); // Hide new category input if existing category selected // Render peças and ferragens this.pecasCriador = JSON.parse(JSON.stringify(modulo.pecas || [])); this.ferragensCriador = JSON.parse(JSON.stringify(modulo.ferragens || [])); this._renderCreatorPecas(); this._renderCreatorFerragens(); this.formCriador.style.display = 'block'; } }, novoModuloForm() { this.limparFormularioCriador(); this.creatorIdInput.value = ''; // Ensure no ID for new module this.formCriador.style.display = 'block'; }, limparFormularioCriador() { this.creatorIdInput.value = ''; this.creatorNomeInput.value = ''; this.categoriaSelect.value = ''; this.categoriaNovoInput.value = ''; this.categoriaNovoInput.style.display = 'none'; this.pecasCriador = []; this.ferragensCriador = []; this._renderCreatorPecas(); this._renderCreatorFerragens(); }, toggleNovaCategoria() { if (this.categoriaSelect.value === '____NOVA_CATEGORIA____') { this.categoriaNovoInput.style.display = 'block'; this.categoriaNovoInput.required = true; } else { this.categoriaNovoInput.style.display = 'none'; this.categoriaNovoInput.required = false; } }, _renderCreatorPecas() { this.listaPecasDiv.innerHTML = ''; this.pecasCriador.forEach((peca, index) => { const row = document.createElement('div'); row.classList.add('piece-row'); const fitaCorValue = peca.fitaCor === '{}' ? '' : peca.fitaCor; row.innerHTML = ` <input type="text" value="${peca.nome}" placeholder="Nome da Peça" data-field="nome"> <input type="number" value="${peca.qtd}" min="1" data-field="qtd" class="small-input"> <input type="text" value="${peca.alturaFormula}" placeholder="Fórmula Altura (mm)" data-field="alturaFormula" class="formula-input"> <input type="text" value="${peca.larguraFormula}" placeholder="Fórmula Largura (mm)" data-field="larguraFormula" class="formula-input"> <select data-field="material"> <option value="interno" ${peca.material === 'interno' ? 'selected' : ''}>Interno</option> <option value="externo" ${peca.material === 'externo' ? 'selected' : ''}>Externo</option> </select> <div class="fitas-group"> <label><input type="checkbox" ${peca.fitas.a1 ? 'checked' : ''} data-fita="a1"> A1</label> <label><input type="checkbox" ${peca.fitas.a2 ? 'checked' : ''} data-fita="a2"> A2</label> <label><input type="checkbox" ${peca.fitas.l1 ? 'checked' : ''} data-fita="l1"> L1</label> <label><input type="checkbox" ${peca.fitas.l2 ? 'checked' : ''} data-fita="l2"> L2</label> <input type="text" value="${fitaCorValue}" placeholder="Cor Fita" data-field="fitaCor"> </div> <button onclick="MarcenariaApp.removerPeca(${index})" style="background-color: var(--cor-erro);">Remover</button> `; this.listaPecasDiv.appendChild(row); this._addEventListenersToPieceRow(row, index, 'creator'); }); }, _addEventListenersToPieceRow(row, index, type) { const dataArray = type === 'creator' ? this.pecasCriador : this.pecasMontadorRapido; row.querySelectorAll('input[type="text"][data-field], input[type="number"][data-field], select[data-field]').forEach(input => { input.addEventListener('change', (e) => { const field = e.target.dataset.field; let value = e.target.value; if (field === 'qtd') { value = parseInt(value); } dataArray[index][field] = value; if (field === 'fitaCor' && value === '') { dataArray[index]['fitaCor'] = '{}'; // If custom color is empty, revert to default } }); }); row.querySelectorAll('input[type="checkbox"][data-fita]').forEach(checkbox => { checkbox.addEventListener('change', (e) => { const fitaSide = e.target.dataset.fita; dataArray[index].fitas[fitaSide] = e.target.checked; }); }); // Add event listener for general input fields that might need formula editing row.querySelectorAll('input[type="text"].formula-input').forEach(input => { input.addEventListener('dblclick', (e) => { this.abrirEditorPopup(e.target); }); }); }, adicionarPeca() { this.pecasCriador.push({ nome: 'Nova Peça', qtd: 1, alturaFormula: 'A - (2 * espMDFInterno)', larguraFormula: 'L - (2 * espMDFInterno)', material: 'interno', fitaCor: '{}', fitas: { a1: false, a2: false, l1: false, l2: false } }); this._renderCreatorPecas(); }, removerPeca(index) { this.pecasCriador.splice(index, 1); this._renderCreatorPecas(); }, _renderCreatorFerragens() { this.listaFerragensDiv.innerHTML = ''; this.ferragensCriador.forEach((ferragem, index) => { const row = document.createElement('div'); row.classList.add('hardware-row'); row.innerHTML = ` <input type="text" value="${ferragem.item}" placeholder="Nome da Ferragem" data-field="item"> <input type="number" step="0.01" value="${ferragem.preco}" min="0" placeholder="Preço Unit." data-field="preco"> <input type="text" value="${ferragem.formula}" placeholder="Fórmula Qtd/Metros" data-field="formula" class="formula-input"> <button onclick="MarcenariaApp.removerFerragem(${index})" style="background-color: var(--cor-erro);">Remover</button> `; this.listaFerragensDiv.appendChild(row); this._addEventListenersToHardwareRow(row, index, 'creator'); }); }, _addEventListenersToHardwareRow(row, index, type) { const dataArray = type === 'creator' ? this.ferragensCriador : this.ferragensMontadorRapido; row.querySelectorAll('input[type="text"][data-field], input[type="number"][data-field]').forEach(input => { input.addEventListener('change', (e) => { const field = e.target.dataset.field; let value = e.target.value; if (field === 'preco') { value = parseFloat(value); } dataArray[index][field] = value; }); }); row.querySelectorAll('input[type="text"].formula-input').forEach(input => { input.addEventListener('dblclick', (e) => { this.abrirEditorPopup(e.target); }); }); }, adicionarFerragemUnidade() { this.ferragensCriador.push({ tipo: 'unidade', item: 'Nova Ferragem (un)', formula: '1', preco: 1.00 }); this._renderCreatorFerragens(); }, adicionarPuxadorBarra() { this.ferragensCriador.push({ tipo: 'metro', item: 'Puxador Perfil (m)', formula: '0.5', preco: 20.00 }); this._renderCreatorFerragens(); }, removerFerragem(index) { this.ferragensCriador.splice(index, 1); this._renderCreatorFerragens(); }, salvarModulo() { const id = this.creatorIdInput.value || Date.now().toString(); const nome = this.creatorNomeInput.value.trim(); let categoria = this.categoriaSelect.value; if (categoria === '____NOVA_CATEGORIA____') { categoria = this.categoriaNovoInput.value.trim(); } if (!nome || !categoria) { alert('Por favor, preencha o nome do módulo e a categoria.'); return; } const modulo = { id: id, nome: nome, categoria: categoria, pecas: JSON.parse(JSON.stringify(this.pecasCriador)), ferragens: JSON.parse(JSON.stringify(this.ferragensCriador)) }; this.modulosDB[id] = modulo; this.salvarModulosDB(); this.atualizarListaModulosSalvos(); this.renderBotoesCategorias(); // To push new categories to main app alert(`Módulo "${nome}" salvo com sucesso!`); this.limparFormularioCriador(); this.modulosSalvosSelect.value = id; // Select the newly saved/updated module this.formCriador.style.display = 'none'; this.modulosSalvosSelect.value = id; }, excluirModulo() { const moduloId = this.modulosSalvosSelect.value; if (!moduloId) { alert('Selecione um módulo para excluir.'); return; } if (confirm(`Tem certeza que deseja excluir o módulo "${this.modulosDB[moduloId].nome}"? Esta ação é irreversível.`)) { delete this.modulosDB[moduloId]; this.salvarModulosDB(); this.atualizarListaModulosSalvos(); this.renderBotoesCategorias(); this.limparFormularioCriador(); this.formCriador.style.display = 'none'; alert('Módulo excluído com sucesso.'); } }, // --- FORMULA EDITOR POPUP --- abrirEditorPopup(inputElement) { this.currentlyEditingInput = inputElement; this.popupTextarea.value = inputElement.value; this.popupEditor.style.display = 'block'; // Position the popup near the input const rect = inputElement.getBoundingClientRect(); this.popupEditor.style.left = `${rect.left}px`; this.popupEditor.style.top = `${rect.bottom + 5}px`; this.popupTextarea.focus(); }, fecharEditorPopup(applyChanges) { if (this.currentlyEditingInput && applyChanges) { this.currentlyEditingInput.value = this.popupTextarea.value; // Trigger change event manually to update underlying data const event = new Event('change'); this.currentlyEditingInput.dispatchEvent(event); } this.popupEditor.style.display = 'none'; this.currentlyEditingInput = null; }, // --- Core Calculation Logic --- calcularAreaMDF(tipo, largura, altura) { return (largura / 1000) * (altura / 1000); // Area in m² }, calcularPrecoMDF(area, material) { if (material === 'interno') { return area * this.PRECO_MDF_INTERNO_M2; } else if (material === 'externo') { return area * this.PRECO_MDF_EXTERNO_M2; } return 0; }, calcularPrecoFitaBorda(comprimento) { return comprimento / 1000 * this.PRECO_FITA_BORDA_M; // price per meter }, // Safe formula evaluation avaliarFormula(formula, L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica, valorAuxiliar = 1) { try { // Replace `$` with valorAuxiliar for flexibility const processedFormula = formula.replace(/\$/g, valorAuxiliar.toString()); // eslint-disable-next-line no-eval return eval(processedFormula); // Use eval carefully, but here it's for user-defined internal formulas } catch (e) { console.warn(`Erro ao avaliar fórmula "${formula}": ${e.message}. Retornando 0.`, { L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica, valorAuxiliar }); return 0; } }, calcularTotalComponente(componente, L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica, valorAuxiliar) { const componentKey = componente.componentKey; const compDef = this.componenteLibrary[componentKey]; if (!compDef) { console.error(`Componente ${componentKey} não encontrado na biblioteca.`); return { pecasCalculadas: [], ferragensCalculadas: [] }; } const calculatedPecas = []; const calculatedFerragens = []; // Vars for formula evaluation const vars = { L: L, A: A, P: P, espMDFInterno: espMDFInterno, espMDFExterno: espMDFExterno, folgaPorta: folgaPorta, folgaCorredica: folgaCorredica, qtd: valorAuxiliar, // Pass the QTD of the module (valorAuxiliar) as a variable params: componente.params || {} }; if (compDef.geraPecas) { const tempPecas = compDef.geraPecas(vars); tempPecas.forEach(p => { // For 'frenteGaveta' and 'kitGaveta', alturaFormula might embed actual values, not '$' const altura = this.avaliarFormula(p.alturaFormula.toString(), L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica, vars.qtd); const largura = this.avaliarFormula(p.larguraFormula.toString(), L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica, vars.qtd); const qtd = p.qtd; if (altura > 0 && largura > 0 && qtd > 0) { calculatedPecas.push({ nome: p.nome, qtd: qtd, altura: altura, largura: largura, material: p.material, fitaCor: p.fitaCor, fitas: p.fitas }); } }); } if (compDef.geraFerragens) { const tempFerragens = compDef.geraFerragens(vars); tempFerragens.forEach(f => { // Use component-specific parameter count (e.g., number of drawers) or general quantity const formulaValue = this.avaliarFormula(f.formula.toString(), L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica, vars.params && vars.params.alturas ? vars.params.alturas.split(',').filter(h => h.trim() !== '').length : vars.qtd); if (formulaValue > 0) { calculatedFerragens.push({ tipo: f.tipo, item: f.item, quantidade: formulaValue, preco: f.preco }); } }); } return { pecasCalculadas: calculatedPecas, ferragensCalculadas: calculatedFerragens }; }, // --- REPORT GENERATION --- gerarRelatorio() { if (this.modulosProjeto.length === 0) { alert('Adicione módulos ao projeto antes de gerar o relatório.'); return; } const cliente = this.clienteInput.value.trim() || 'Não Informado'; const maoDeObraPerc = parseFloat(this.maoDeObraPercInput.value) / 100 || 0; const margem = parseFloat(this.margemInput.value) / 100 || 0; const corPadraoInterna = this.corPadraoInternaInput.value.trim(); const espPadraoInterna = parseFloat(this.espPadraoInternaInput.value) || 0; const corPadraoExterna = this.corPadraoExternaInput.value.trim(); const espPadraoExterna = parseFloat(this.espPadraoExternaInput.value) || 0; let todasAsPecas = []; let todasAsFerragens = []; let custosTotaisMDF = 0; let custosTotaisFitaBorda = 0; let custosTotaisFerragens = 0; const relatorioHTML = []; // Group modules by environment const modulosPorAmbiente = this.modulosProjeto.reduce((acc, modulo) => { if (!acc[modulo.ambiente]) { acc[modulo.ambiente] = []; } acc[modulo.ambiente].push(modulo); return acc; }, {}); for (const ambiente in modulosPorAmbiente) { relatorioHTML.push(`<h3 class="relatorio-ambiente">Ambiente: ${ambiente}</h3>`); modulosPorAmbiente[ambiente].forEach(modulo => { const L = modulo.largura; const A = modulo.altura; const P = modulo.profundidade; const espMDFInterno = espPadraoInterna; const espMDFExterno = espPadraoExterna; const folgaPorta = this.FOLGA_PORTA; const folgaCorredica = this.FOLGA_CORREDICA; relatorioHTML.push(`<h4>Módulo: ${modulo.nome} (L: ${L}mm, P: ${P}mm, A: ${A}mm)</h4>`); const pecasDoModulo = []; const ferragensDoModulo = []; if (modulo.isStandardComponent) { const { pecasCalculadas, ferragensCalculadas } = this.calcularTotalComponente({ componentKey: modulo.componentKey, params: modulo.params }, L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica, 1); // Qtd do módulo é 1 para um módulo simples pecasDoModulo.push(...pecasCalculadas); ferragensDoModulo.push(...ferragensCalculadas); } else { modulo.pecas.forEach(pecaBase => { const altura = this.avaliarFormula(pecaBase.alturaFormula.toString(), L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica); const largura = this.avaliarFormula(pecaBase.larguraFormula.toString(), L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica); const qtd = pecaBase.qtd; if (altura > 0 && largura > 0 && qtd > 0) { pecasDoModulo.push({ nome: pecaBase.nome, qtd: qtd, altura: altura, largura: largura, material: pecaBase.material, fitaCor: pecaBase.fitaCor, fitas: pecaBase.fitas }); } }); modulo.ferragens.forEach(ferragemBase => { const quantidade = this.avaliarFormula(ferragemBase.formula.toString(), L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica); if (quantidade > 0) { ferragensDoModulo.push({ tipo: ferragemBase.tipo, item: ferragemBase.item, quantidade: quantidade, preco: ferragemBase.preco }); } }); } // Agregação de peças no nível do módulo para garantir que as peças que foram adicionadas no "builder" são corretamente mescladas const aggregatedModulePecas = pecasDoModulo.reduce((acc, peca) => { const key = `${peca.nome}|${peca.altura}|${peca.largura}|${peca.material}|${JSON.stringify(peca.fitas)}|${peca.fitaCor}`; if (!acc[key]) { acc[key] = { ...peca }; } else { acc[key].qtd += peca.qtd; } return acc; }, {}); const finalModulePecas = Object.values(aggregatedModulePecas); const aggregatedModuleFerragens = ferragensDoModulo.reduce((acc, ferragem) => { const key = `${ferragem.item}|${ferragem.tipo}`; if (!acc[key]) { acc[key] = { ...ferragem }; } else { acc[key].quantidade += ferragem.quantidade; } return acc; }, {}); const finalModuleFerragens = Object.values(aggregatedModuleFerragens); // Adicionar ao consolidado geral todasAsPecas.push(...finalModulePecas); todasAsFerragens.push(...finalModuleFerragens); // Gerar tabela de peças para o módulo relatorioHTML.push(`<h5>Peças do Módulo ${modulo.nome}:</h5>`); relatorioHTML.push(this.gerarTabelaPecas(finalModulePecas, corPadraoInterna, espPadraoInterna, corPadraoExterna, espPadraoExterna)); // Gerar tabela de ferragens para o módulo relatorioHTML.push(`<h5>Ferragens do Módulo ${modulo.nome}:</h5>`); relatorioHTML.push(this.gerarTabelaFerragens(finalModuleFerragens)); }); } // Aggregate ALL pieces for the whole project const aggregatedPecas = todasAsPecas.reduce((acc, peca) => { // Unique key for material, dimensions, and fita configuration const key = `${peca.nome}|${peca.altura}|${peca.largura}|${peca.material}|${JSON.stringify(peca.fitas)}|${peca.fitaCor}`; if (!acc[key]) { acc[key] = { ...peca }; } else { acc[key].qtd += peca.qtd; } return acc; }, {}); const pecasFinais = Object.values(aggregatedPecas); // Calculate costs for final aggregated pieces pecasFinais.forEach(peca => { const area = this.calcularAreaMDF(peca.material, peca.largura, peca.altura) * peca.qtd; custosTotaisMDF += this.calcularPrecoMDF(area, peca.material); let comprimentoFita = 0; const fitaCor = peca.fitaCor !== '{}' ? peca.fitaCor : corPadraoExterna; if (peca.fitas.a1) comprimentoFita += peca.altura; if (peca.fitas.a2) comprimentoFita += peca.altura; if (peca.fitas.l1) comprimentoFita += peca.largura; if (peca.fitas.l2) comprimentoFita += peca.largura; custosTotaisFitaBorda += this.calcularPrecoFitaBorda(comprimentoFita * peca.qtd); // x Peca.qtd peca.custoMDF = (this.calcularPrecoMDF(this.calcularAreaMDF(peca.material, peca.largura, peca.altura), peca.material) * peca.qtd); peca.custoFitas = (this.calcularPrecoFitaBorda(comprimentoFita) * peca.qtd); // Save cost per piece type peca.fitaCorExibicao = fitaCor; }); // Aggregate ALL ferragens for the whole project const aggregatedFerragens = todasAsFerragens.reduce((acc, ferragem) => { const key = `${ferragem.item}|${ferragem.tipo}`; if (!acc[key]) { acc[key] = { ...ferragem }; } else { acc[key].quantidade += ferragem.quantidade; } return acc; }, {}); const ferragensFinais = Object.values(aggregatedFerragens); ferragensFinais.forEach(ferragem => { custosTotaisFerragens += ferragem.quantidade * ferragem.preco; }); let custoMateriais = custosTotaisMDF + custosTotaisFitaBorda + custosTotaisFerragens; let maoDeObra = custoMateriais * maoDeObraPerc; let custoTotal = custoMateriais + maoDeObra; let precoFinal = custoTotal * (1 + margem); const custos = { custoMDF: custosTotaisMDF, custoFitaBorda: custosTotaisFitaBorda, custoFerragens: custosTotaisFerragens, custoMateriais: custoMateriais, maoDeObra: maoDeObra, custoTotal: custoTotal, precoFinal: precoFinal }; this.dadosRelatorioAtual = { cliente: cliente, modulos: this.modulosProjeto, pecas: pecasFinais, ferragens: ferragensFinais, custos: custos, parametrosGlobais: { maoDeObraPerc: this.maoDeObraPercInput.value, margem: this.margemInput.value, corInterna: corPadraoInterna, espInterna: espPadraoInterna, corExterna: corPadraoExterna, espExterna: espPadraoExterna } }; // Add overall tables to the report relatorioHTML.push(`<h3 class="relatorio-ambiente">Resumo Geral de Peças</h3>`); relatorioHTML.push(this.gerarTabelaPecas(pecasFinais, corPadraoInterna, espPadraoInterna, corPadraoExterna, espPadraoExterna, true)); // true para tabela geral relatorioHTML.push(`<h3 class="relatorio-ambiente">Resumo Geral de Ferragens</h3>`); relatorioHTML.push(this.gerarTabelaFerragens(ferragensFinais, true)); // true para tabela geral relatorioHTML.push(`<h3 class="relatorio-ambiente">Resumo de Custos</h3>`); relatorioHTML.push(this.gerarTabelaResumoCustos(custos)); relatorioHTML.push(`<h3 class="relatorio-ambiente">Orçamento Final para Cliente</h3>`); relatorioHTML.push(this.gerarTabelaOrcamento(custos.precoFinal, cliente)); this.relatorioContainerDiv.innerHTML = relatorioHTML.join(''); this.botoesExportarDiv.innerHTML = ` <button class="btn-cliente-view" onclick="MarcenariaApp.abrirModalOrcamentoCliente()">Abrir Orçamento Cliente</button> <button class="btn-pdf" onclick="MarcenariaApp.exportarParaPDF()">Exportar PDF (Detalhado)</button> <button class="btn-excel" onclick="MarcenariaApp.exportarParaExcel()">Exportar Excel (Detalhado)</button> `; this.botoesExportarDiv.style.display = 'flex'; // Exibe os botões }, gerarTabelaPecas(pecas, corInterna, espInterna, corExterna, espExterna, isOverall = false) { let tableHTML = `<div class="resultado-secao"><table><thead><tr><th>Nome da Peça</th><th>Qtd</th><th>Altura (mm)</th><th>Largura (mm)</th><th>Material</th><th>Fitas</th>`; if (isOverall) { tableHTML += `<th>Custo MDF</th><th>Custo Fitas</th><th>Custo Total</th>`; } tableHTML += `</tr></thead><tbody>`; pecas.sort((a,b) => a.nome.localeCompare(b.nome)).forEach(peca => { const materialDisplay = `${peca.material === 'interno' ? corInterna : corExterna} (${peca.material === 'interno' ? espInterna : espExterna}mm)`; const fitasDisplay = [`${peca.fitas.a1?'A1':''}`,`${peca.fitas.a2?'A2':''}`,`${peca.fitas.l1?'L1':''}`,`${peca.fitas.l2?'L2':''}`].filter(Boolean).join(',') || '-'; const fitaCor = peca.fitaCor !== '{}' ? peca.fitaCor : corExterna; tableHTML += `<tr> <td>${peca.nome}</td> <td>${peca.qtd}</td> <td>${peca.altura}</td> <td>${peca.largura}</td> <td>${materialDisplay}</td> <td>${fitasDisplay} (${fitaCor})</td>`; if (isOverall) { const totalItemCusto = peca.custoMDF + peca.custoFitas; tableHTML += `<td>${this.formataDinheiro(peca.custoMDF)}</td> <td>${this.formataDinheiro(peca.custoFitas)}</td> <td>${this.formataDinheiro(totalItemCusto)}</td>`; } tableHTML += `</tr>`; }); tableHTML += `</tbody></table></div>`; return tableHTML; }, gerarTabelaFerragens(ferragens, isOverall = false) { let tableHTML = `<div class="resultado-secao"><table><thead><tr><th>Item</th><th>Quantidade</th><th>Preço Unitário</th>`; if (isOverall) { tableHTML += `<th>Custo Total</th>`; } tableHTML += `</tr></thead><tbody>`; ferragens.sort((a, b) => a.item.localeCompare(b.item)).forEach(ferragem => { const totalCusto = ferragem.quantidade * ferragem.preco; tableHTML += `<tr> <td>${ferragem.item}</td> <td>${ferragem.quantidade.toFixed(2)} ${ferragem.tipo === 'metro' ? 'm' : 'un'}</td> <td>${this.formataDinheiro(ferragem.preco)}</td>`; if (isOverall) { tableHTML += `<td>${this.formataDinheiro(totalCusto)}</td>`; } tableHTML += `</tr>`; }); tableHTML += `</tbody></table></div>`; return tableHTML; }, gerarTabelaResumoCustos(custos) { return ` <div class="resultado-secao"> <table> <tbody> <tr><th>Custo Total MDF:</th><td>${this.formataDinheiro(custos.custoMDF)}</td></tr> <tr><th>Custo Total Fita de Borda:</th><td>${this.formataDinheiro(custos.custoFitaBorda)}</td></tr> <tr><th>Custo Total Ferragens:</th><td>${this.formataDinheiro(custos.custoFerragens)}</td></tr> <tr><th>Custo TOTAL de Materiais:</th><td><strong>${this.formataDinheiro(custos.custoMateriais)}</strong></td></tr> <tr><th>Mão de Obra (${this.maoDeObraPercInput.value}%):</th><td>${this.formataDinheiro(custos.maoDeObra)}</td></tr> <tr><th>Custo Total do Projeto (Materiais + M.O.):</th><td><strong>${this.formataDinheiro(custos.custoTotal)}</strong></td></tr> <tr><th>Margem de Lucro (${this.margemInput.value}%):</th><td>${this.formataDinheiro(custos.precoFinal - custos.custoTotal)}</td></tr> <tr><th>PREÇO FINAL DO PROJETO:</th><td><strong style="color:var(--cor-sucesso); font-size:1.2em;">${this.formataDinheiro(custos.precoFinal)}</strong></td></tr> </tbody> </table> </div> `; }, gerarTabelaOrcamento(precoFinal, cliente) { return ` <div class="resultado-secao"> <p>Preço final para o cliente <strong>${cliente}</strong>:</p> <h3 style="text-align:center; color:var(--cor-sucesso); font-size:2em;">${this.formataDinheiro(precoFinal)}</h3> </div> `; }, // --- EXPORT FUNCTIONS --- exportarParaPDF() { if (Object.keys(this.dadosRelatorioAtual).length === 0) { alert('Gere o relatório primeiro.'); return; } const { jsPDF } = window.jspdf; const doc = new jsPDF(); let y = 10; const margin = 10; const lineHeight = 7; const titleSize = 16; const sectionTitleSize = 12; const tableHeaderColor = [236, 240, 241]; // var(--cor-fundo) doc.setFontSize(titleSize); doc.text("Relatório Detalhado de Marcenaria", margin, y); y += lineHeight; doc.setFontSize(10); doc.text(`Cliente: ${this.dadosRelatorioAtual.cliente}`, margin, y); y += lineHeight; doc.text(`Data: ${new Date().toLocaleDateString()}`, margin, y); y += lineHeight; function addPageIfNecessary() { if (y > 280) { // Approx A4 height doc.addPage(); y = margin; } } addPageIfNecessary(); doc.setFontSize(sectionTitleSize); doc.text("Parâmetros Globais:", margin, y += 10); doc.setFontSize(10); doc.text(`Mão de Obra: ${this.dadosRelatorioAtual.parametrosGlobais.maoDeObraPerc}%`, margin, y += lineHeight); doc.text(`Margem de Lucro: ${this.dadosRelatorioAtual.parametrosGlobais.margem}%`, margin, y += lineHeight); doc.text(`Cor Interna: ${this.dadosRelatorioAtual.parametrosGlobais.corInterna} (${this.dadosRelatorioAtual.parametrosGlobais.espInterna}mm)`, margin, y += lineHeight); doc.text(`Cor Externa: ${this.dadosRelatorioAtual.parametrosGlobais.corExterna} (${this.dadosRelatorioAtual.parametrosGlobais.espExterna}mm)`, margin, y += lineHeight); y += 5; // Group modules by environment for PDF const modulosPorAmbiente = this.dadosRelatorioAtual.modulos.reduce((acc, modulo) => { if (!acc[modulo.ambiente]) { acc[modulo.ambiente] = []; } acc[modulo.ambiente].push(modulo); return acc; }, {}); for (const ambiente in modulosPorAmbiente) { addPageIfNecessary(); doc.setFontSize(sectionTitleSize); doc.text(`Ambiente: ${ambiente}`, margin, y += 15); y += 5; modulosPorAmbiente[ambiente].forEach(modulo => { addPageIfNecessary(); doc.setFontSize(11); doc.text(`Módulo: ${modulo.nome} (L:${modulo.largura} P:${modulo.profundidade} A:${modulo.altura})`, margin, y += 10); y += 2; const pecasModulo = []; const ferragensModulo = []; const L = modulo.largura; const A = modulo.altura; const P = modulo.profundidade; const espMDFInterno = this.dadosRelatorioAtual.parametrosGlobais.espInterna; const espMDFExterno = this.dadosRelatorioAtual.parametrosGlobais.espExterna; const folgaPorta = this.FOLGA_PORTA; const folgaCorredica = this.FOLGA_CORREDICA; if (modulo.isStandardComponent) { const { pecasCalculadas, ferragensCalculadas } = this.calcularTotalComponente({ componentKey: modulo.componentKey, params: modulo.params }, L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica, 1); pecasModulo.push(...pecasCalculadas); ferragensModulo.push(...ferragensCalculadas); } else { modulo.pecas.forEach(pecaBase => { const altura = this.avaliarFormula(pecaBase.alturaFormula.toString(), L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica); const largura = this.avaliarFormula(pecaBase.larguraFormula.toString(), L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica); const qtd = pecaBase.qtd; if (altura > 0 && largura > 0 && qtd > 0) { pecasModulo.push({ nome: pecaBase.nome, qtd: qtd, altura: altura, largura: largura, material: pecaBase.material, fitaCor: pecaBase.fitaCor, fitas: pecaBase.fitas }); } }); modulo.ferragens.forEach(ferragemBase => { const quantidade = this.avaliarFormula(ferragemBase.formula.toString(), L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica); if (quantidade > 0) { ferragensModulo.push({ tipo: ferragemBase.tipo, item: ferragemBase.item, quantidade: quantidade, preco: ferragemBase.preco }); } }); } // Aggregate pieces for the current module for PDF table const aggregatedModulePecas = pecasModulo.reduce((acc, peca) => { const key = `${peca.nome}|${peca.altura}|${peca.largura}|${peca.material}|${JSON.stringify(peca.fitas)}|${peca.fitaCor}`; if (!acc[key]) { acc[key] = { ...peca }; } else { acc[key].qtd += peca.qtd; } return acc; }, {}); const finalModulePecas = Object.values(aggregatedModulePecas); const aggregatedModuleFerragens = ferragensModulo.reduce((acc, ferragem) => { const key = `${ferragem.item}|${ferragem.tipo}`; if (!acc[key]) { acc[key] = { ...ferragem }; } else { acc[key].quantidade += ferragem.quantidade; } return acc; }, {}); const finalModuleFerragens = Object.values(aggregatedModuleFerragens); // Peças TABLE doc.setFontSize(10); doc.text("Peças:", margin, y += 6); doc.autoTable({ startY: y + 2, head: [['Nome', 'Qtd', 'Alt (mm)', 'Larg (mm)', 'Material', 'Fitas']], body: finalModulePecas.map(p => { const material = `${p.material === 'interno' ? this.dadosRelatorioAtual.parametrosGlobais.corInterna : this.dadosRelatorioAtual.parametrosGlobais.corExterna} (${p.material === 'interno' ? this.dadosRelatorioAtual.parametrosGlobais.espInterna : this.dadosRelatorioAtual.parametrosGlobais.espExterna}mm)`; const fitas = Object.keys(p.fitas).filter(k => p.fitas[k]).map(k => k.toUpperCase()).join(',') || '-'; const fitaCor = p.fitaCor !== '{}' ? p.fitaCor : this.dadosRelatorioAtual.parametrosGlobais.corExterna; return [p.nome, p.qtd, p.altura, p.largura, material, `${fitas} (${fitaCor})`]; }), theme: 'grid', headStyles: { fillColor: tableHeaderColor, textColor: [0,0,0], fontStyle: 'bold' }, margin: { left: margin, right: margin }, didDrawPage: (data) => { y = data.cursor.y; } }); // Ferragens TABLE addPageIfNecessary(); doc.setFontSize(10); doc.text("Ferragens:", margin, y += 6); doc.autoTable({ startY: y + 2, head: [['Item', 'Quantidade', 'Preço Unit.']], body: finalModuleFerragens.map(f => [f.item, `${f.quantidade.toFixed(2)} ${f.tipo === 'metro' ? 'm' : 'un'}`, this.formataDinheiro(f.preco)]), theme: 'grid', headStyles: { fillColor: tableHeaderColor, textColor: [0,0,0], fontStyle: 'bold' }, margin: { left: margin, right: margin }, didDrawPage: (data) => { y = data.cursor.y; } }); }); } // Overall Summary Tables addPageIfNecessary(); doc.setFontSize(sectionTitleSize); doc.text("Resumo Geral de Peças", margin, y += 15); doc.autoTable({ startY: y + 5, head: [['Nome', 'Qtd', 'Alt (mm)', 'Larg (mm)', 'Material', 'Fitas', 'Custo MDF', 'Custo Fitas', 'Custo Total']], body: this.dadosRelatorioAtual.pecas.map(p => { const material = `${p.material === 'interno' ? this.dadosRelatorioAtual.parametrosGlobais.corInterna : this.dadosRelatorioAtual.parametrosGlobais.corExterna} (${p.material === 'interno' ? this.dadosRelatorioAtual.parametrosGlobais.espInterna : this.dadosRelatorioAtual.parametrosGlobais.espExterna}mm)`; const fitas = Object.keys(p.fitas).filter(k => p.fitas[k]).map(k => k.toUpperCase()).join(',') || '-'; const fitaCor = p.fitaCor !== '{}' ? p.fitaCor : this.dadosRelatorioAtual.parametrosGlobais.corExterna; const totalItemCusto = p.custoMDF + p.custoFitas; return [p.nome, p.qtd, p.altura, p.largura, material, `${fitas} (${fitaCor})`, this.formataDinheiro(p.custoMDF), this.formataDinheiro(p.custoFitas), this.formataDinheiro(totalItemCusto)]; }), theme: 'grid', headStyles: { fillColor: tableHeaderColor, textColor: [0,0,0], fontStyle: 'bold' }, margin: { left: margin, right: margin }, didDrawPage: (data) => { y = data.cursor.y; } }); addPageIfNecessary(); doc.setFontSize(sectionTitleSize); doc.text("Resumo Geral de Ferragens", margin, y += 15); doc.autoTable({ startY: y + 5, head: [['Item', 'Quantidade', 'Preço Unit.', 'Custo Total']], body: this.dadosRelatorioAtual.ferragens.map(f => [f.item, `${f.quantidade.toFixed(2)} ${f.tipo === 'metro' ? 'm' : 'un'}`, this.formataDinheiro(f.preco), this.formataDinheiro(f.quantidade * f.preco)]), theme: 'grid', headStyles: { fillColor: tableHeaderColor, textColor: [0,0,0], fontStyle: 'bold' }, margin: { left: margin, right: margin }, didDrawPage: (data) => { y = data.cursor.y; } }); addPageIfNecessary(); doc.setFontSize(sectionTitleSize); doc.text("Resumo de Custos", margin, y += 15); doc.autoTable({ startY: y + 5, head: [['Descrição', 'Valor']], body: [ ['Custo Total MDF:', this.formataDinheiro(this.dadosRelatorioAtual.custos.custoMDF)], ['Custo Total Fita de Borda:', this.formataDinheiro(this.dadosRelatorioAtual.custos.custoFitaBorda)], ['Custo Total Ferragens:', this.formataDinheiro(this.dadosRelatorioAtual.custos.custoFerragens)], ['Custo TOTAL de Materiais:', this.formataDinheiro(this.dadosRelatorioAtual.custos.custoMateriais)], [`Mão de Obra (${this.dadosRelatorioAtual.parametrosGlobais.maoDeObraPerc}%):`, this.formataDinheiro(this.dadosRelatorioAtual.custos.maoDeObra)], ['Custo Total do Projeto (Materiais + M.O.):', this.formataDinheiro(this.dadosRelatorioAtual.custos.custoTotal)], [`Margem de Lucro (${this.dadosRelatorioAtual.parametrosGlobais.margem}%):`, this.formataDinheiro(this.dadosRelatorioAtual.custos.precoFinal - this.dadosRelatorioAtual.custos.custoTotal)], ['PREÇO FINAL DO PROJETO:', this.formataDinheiro(this.dadosRelatorioAtual.custos.precoFinal)] ], theme: 'grid', headStyles: { fillColor: tableHeaderColor, textColor: [0,0,0], fontStyle: 'bold' }, styles: { fontStyle: 'bold' }, // Make all cells bold for summary margin: { left: margin, right: margin }, didDrawPage: (data) => { y = data.cursor.y; } }); addPageIfNecessary(); doc.setFontSize(sectionTitleSize + 2); doc.text(`Orçamento para ${this.dadosRelatorioAtual.cliente}:`, margin, y + 15); doc.setFontSize(titleSize + 4); doc.setTextColor(46, 204, 113); // green color doc.text(this.formataDinheiro(this.dadosRelatorioAtual.custos.precoFinal), doc.internal.pageSize.width / 2, y + 30, { align: 'center' }); doc.save(`Orcamento_${this.dadosRelatorioAtual.cliente.replace(/\s/g, '_')}_detalhado.pdf`); }, async exportarParaExcel() { if (Object.keys(this.dadosRelatorioAtual).length === 0) { alert('Gere o relatório primeiro.'); return; } const wb = XLSX.utils.book_new(); const fileName = `Orcamento_${this.dadosRelatorioAtual.cliente.replace(/\s/g, '_')}_detalhado.xlsx`; // Sheet 1: Resumo Geral de Peças const ws_pecas_headers = ['Nome da Peça', 'Qtd', 'Altura (mm)', 'Largura (mm)', 'Material', 'Espessura (mm)', 'Fitas', 'Cor Fita', 'Área (m²)', 'Custo MDF', 'Custo Fitas', 'Custo Total']; const ws_pecas_data = this.dadosRelatorioAtual.pecas.map(p => { const materialDisplay = p.material === 'interno' ? this.dadosRelatorioAtual.parametrosGlobais.corInterna : this.dadosRelatorioAtual.parametrosGlobais.corExterna; const espessuraDisplay = p.material === 'interno' ? this.dadosRelatorioAtual.parametrosGlobais.espInterna : this.dadosRelatorioAtual.parametrosGlobais.espExterna; const fitas = Object.keys(p.fitas).filter(k => p.fitas[k]).map(k => k.toUpperCase()).join(',') || '-'; const fitaCor = p.fitaCor !== '{}' ? p.fitaCor : this.dadosRelatorioAtual.parametrosGlobais.corExterna; const areaOnePiece = this.calcularAreaMDF(p.material, p.largura, p.altura); return [ p.nome, p.qtd, p.altura, p.largura, materialDisplay, espessuraDisplay, fitas, fitaCor, (areaOnePiece * p.qtd).toFixed(4), p.custoMDF.toFixed(2), p.custoFitas.toFixed(2), (p.custoMDF + p.custoFitas).toFixed(2) ]; }); const ws_pecas = XLSX.utils.aoa_to_sheet([ws_pecas_headers, ...ws_pecas_data]); XLSX.utils.book_append_sheet(wb, ws_pecas, "Peças_Geral"); // Sheet 2: Resumo Geral de Ferragens const ws_ferragens_headers = ['Item', 'Quantidade', 'Tipo', 'Preço Unitário (R$)', 'Custo Total (R$)']; const ws_ferragens_data = this.dadosRelatorioAtual.ferragens.map(f => [ f.item, f.quantidade.toFixed(2), f.tipo === 'metro' ? 'm' : 'un', f.preco.toFixed(2), (f.quantidade * f.preco).toFixed(2) ]); const ws_ferragens = XLSX.utils.aoa_to_sheet([ws_ferragens_headers, ...ws_ferragens_data]); XLSX.utils.book_append_sheet(wb, ws_ferragens, "Ferragens_Geral"); // Sheet 3: Resumo de Custos const ws_custos_headers = ['Descrição', 'Valor (R$)']; const ws_custos_data = [ ['Custo Total MDF:', this.dadosRelatorioAtual.custos.custoMDF.toFixed(2)], ['Custo Total Fita de Borda:', this.dadosRelatorioAtual.custos.custoFitaBorda.toFixed(2)], ['Custo Total Ferragens:', this.dadosRelatorioAtual.custos.custoFerragens.toFixed(2)], ['Custo TOTAL de Materiais:', this.dadosRelatorioAtual.custos.custoMateriais.toFixed(2)], [`Mão de Obra (${this.dadosRelatorioAtual.parametrosGlobais.maoDeObraPerc}%):`, this.dadosRelatorioAtual.custos.maoDeObra.toFixed(2)], ['Custo Total do Projeto (Materiais + M.O.):', this.dadosRelatorioAtual.custos.custoTotal.toFixed(2)], [`Margem de Lucro (${this.dadosRelatorioAtual.parametrosGlobais.margem}%):`, (this.dadosRelatorioAtual.custos.precoFinal - this.dadosRelatorioAtual.custos.custoTotal).toFixed(2)], ['PREÇO FINAL DO PROJETO:', this.dadosRelatorioAtual.custos.precoFinal.toFixed(2)] ]; const ws_custos = XLSX.utils.aoa_to_sheet([ws_custos_headers, ...ws_custos_data]); XLSX.utils.book_append_sheet(wb, ws_custos, "Resumo_Custos"); // Loop through modules to add individual module sheets // Group modules by environment for Excel const modulosPorAmbiente = this.dadosRelatorioAtual.modulos.reduce((acc, modulo) => { if (!acc[modulo.ambiente]) { acc[modulo.ambiente] = []; } acc[modulo.ambiente].push(modulo); return acc; }, {}); for (const ambiente in modulosPorAmbiente) { modulosPorAmbiente[ambiente].forEach((modulo, index) => { const sheetName = `${ambiente.substring(0, 5)}_${modulo.nome.substring(0, 10)}_${index + 1}`.replace(/[^a-zA-Z0-9_]/g, ''); const L = modulo.largura; const A = modulo.altura; const P = modulo.profundidade; const espMDFInterno = this.dadosRelatorioAtual.parametrosGlobais.espInterna; const espMDFExterno = this.dadosRelatorioAtual.parametrosGlobais.espExterna; const folgaPorta = this.FOLGA_PORTA; const folgaCorredica = this.FOLGA_CORREDICA; const pecasDoModulo = []; const ferragensDoModulo = []; if (modulo.isStandardComponent) { const { pecasCalculadas, ferragensCalculadas } = this.calcularTotalComponente({ componentKey: modulo.componentKey, params: modulo.params }, L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica, 1); pecasDoModulo.push(...pecasCalculadas); ferragensDoModulo.push(...ferragensCalculadas); } else { modulo.pecas.forEach(pecaBase => { const altura = this.avaliarFormula(pecaBase.alturaFormula.toString(), L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica); const largura = this.avaliarFormula(pecaBase.larguraFormula.toString(), L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica); const qtd = pecaBase.qtd; if (altura > 0 && largura > 0 && qtd > 0) { pecasDoModulo.push({ nome: pecaBase.nome, qtd: qtd, altura: altura, largura: largura, material: pecaBase.material, fitaCor: pecaBase.fitaCor, fitas: pecaBase.fitas }); } }); modulo.ferragens.forEach(ferragemBase => { const quantidade = this.avaliarFormula(ferragemBase.formula.toString(), L, A, P, espMDFInterno, espMDFExterno, folgaPorta, folgaCorredica); if (quantidade > 0) { ferragensDoModulo.push({ tipo: ferragemBase.tipo, item: ferragemBase.item, quantidade: quantidade, preco: ferragemBase.preco }); } }); } // Aggregate pieces for the current module for Excel sheet const aggregatedModulePecas = pecasDoModulo.reduce((acc, peca) => { const key = `${peca.nome}|${peca.altura}|${peca.largura}|${peca.material}|${JSON.stringify(peca.fitas)}|${peca.fitaCor}`; if (!acc[key]) { acc[key] = { ...peca }; } else { acc[key].qtd += peca.qtd; } return acc; }, {}); const finalModulePecas = Object.values(aggregatedModulePecas); const aggregatedModuleFerragens = ferragensDoModulo.reduce((acc, ferragem) => { const key = `${ferragem.item}|${ferragem.tipo}`; if (!acc[key]) { acc[key] = { ...ferragem }; } else { acc[key].quantidade += ferragem.quantidade; } return acc; }, {}); const finalModuleFerragens = Object.values(aggregatedModuleFerragens); const module_data = [ [`Módulo: ${modulo.nome} (L: ${modulo.largura}mm, P: ${modulo.profundidade}mm, A: ${modulo.altura}mm)`], [], ['Peças:'], ws_pecas_headers.slice(0, 8), // Headers without cost, include fitaCor ...finalModulePecas.map(p => { const material = p.material === 'interno' ? this.dadosRelatorioAtual.parametrosGlobais.corInterna : this.dadosRelatorioAtual.parametrosGlobais.corExterna; const espessura = p.material === 'interno' ? this.dadosRelatorioAtual.parametrosGlobais.espInterna : this.dadosRelatorioAtual.parametrosGlobais.espExterna; const fitas = Object.keys(p.fitas).filter(k => p.fitas[k]).map(k => k.toUpperCase()).join(',') || '-'; const fitaCor = p.fitaCor !== '{}' ? p.fitaCor : this.dadosRelatorioAtual.parametrosGlobais.corExterna; return [p.nome, p.qtd, p.altura, p.largura, material, espessura, fitas, fitaCor]; }), [], ['Ferragens:'], ws_ferragens_headers.slice(0, 4), // Headers without total cost ...finalModuleFerragens.map(f => [f.item, f.quantidade.toFixed(2), f.tipo === 'metro' ? 'm' : 'un', f.preco.toFixed(2)]) ]; const ws_module = XLSX.utils.aoa_to_sheet(module_data); XLSX.utils.book_append_sheet(wb, ws_module, sheetName); }); } try { // Generate the file buffer const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' }); const blob = new Blob([wbout], { type: 'application/octet-stream' }); const file = new File([blob], fileName, { type: 'application/octet-stream' }); // Check for Web Share API support (for mobile) if (navigator.canShare && navigator.canShare({ files: [file] })) { await navigator.share({ files: [file], title: 'Orçamento Marcenaria', text: `Segue o orçamento detalhado: ${fileName}`, }); console.log('Arquivo compartilhado com sucesso.'); } else { // Fallback for desktop or browsers that don't support Web Share API XLSX.writeFile(wb, fileName); } } catch (err) { console.error('Erro ao exportar para Excel:', err); alert('Ocorreu um erro ao tentar exportar o arquivo. Verifique o console para mais detalhes.'); // As a last resort, try the original method again. XLSX.writeFile(wb, fileName); } }, exportarDB() { console.log("--- MarcenariaApp.modulosDB ---"); console.log(JSON.stringify(this.modulosDB, null, 2)); alert("O banco de dados de módulos foi exportado para o console do navegador (F12 > Console)."); }, abrirModalOrcamentoCliente() { if (Object.keys(this.dadosRelatorioAtual).length === 0) { alert('Gere o relatório primeiro.'); return; } const cliente = this.dadosRelatorioAtual.cliente; const precoFinal = this.dadosRelatorioAtual.custos.precoFinal; const orcamentoContentHTML = ` <div class="orcamento-header"> <div class="orcamento-logo">MARCENARIA</div> <div class="orcamento-empresa-dados"> <p>Sua Marcenaria Ltda.</p> <p>Endereço, Cidade - UF</p> <p>Telefone: (XX) XXXX-XXXX</p> <p>Email: contato@suamarcenaria.com.br</p> </div> </div> <div class="orcamento-info-grid"> <div class="orcamento-info-box"> <h4>Informações do Cliente</h4> <p><strong>Nome:</strong> ${cliente}</p> <p><strong>Data:</strong> ${new Date().toLocaleDateString()}</p> </div> <div class="orcamento-info-box"> <h4>Resumo do Orçamento</h4> <p>Seu projeto de marcenaria personalizado.</p> <p>Detalhes completos podem ser consultados diretamente com o vendedor.</p> </div> </div> <table class="orcamento-valores-tabela"> <thead> <tr><th>Descrição</th><th>Valor Total</th></tr> </thead> <tbody> <tr><td>Total do Projeto de Marcenaria</td><td>${this.formataDinheiro(precoFinal)}</td></tr> </tbody> <tfoot> <tr class="total-row"><th>Valor Total do Projeto:</th><td>${this.formataDinheiro(precoFinal)}</td></tr> </tfoot> </table> <div class="orcamento-footer"> <p>Este orçamento é válido por 30 dias. Os valores podem ser alterados após esse período.</p> <p>Aguardamos seu contato para dar prosseguimento ao projeto!</p> </div> `; this.orcamentoClienteContent.innerHTML = orcamentoContentHTML; this.modalOrcamentoCliente.style.display = 'block'; }, fecharModalOrcamentoCliente() { this.modalOrcamentoCliente.style.display = 'none'; this.orcamentoClienteContent.innerHTML = ''; }, imprimirOrcamentoCliente() { window.print(); }, exportarPDFCliente() { const { jsPDF } = window.jspdf; const pdf = new jsPDF('p', 'mm', 'a4'); const content = this.orcamentoClienteContent; // Temporarily hide elements that shouldn't be in the PDF const actions = this.modalOrcamentoCliente.querySelector('.orcamento-actions'); const closeBtn = this.modalOrcamentoCliente.querySelector('.close-btn'); actions.style.display = 'none'; closeBtn.style.display = 'none'; pdf.html(content, { callback: function (doc) { doc.save(`Orcamento_Cliente_${MarcenariaApp.dadosRelatorioAtual.cliente.replace(/\s/g, '_')}.pdf`); actions.style.display = 'flex'; // Restore visibility closeBtn.style.display = 'block'; // Restore visibility }, x: 10, y: 10, width: 190, // A largura do conteúdo em mm (210mm - 2*10mm de margem) windowWidth: 780 // Largura do elemento HTML em pixels para renderização }); }, // --- UTILITY FUNCTIONS --- formataDinheiro(valor) { return new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(valor); }, // TERMINAL (added for debugging and interaction) terminal: { container: null, header: null, body: null, input: null, toggleBtn: null, closeBtn: null, history: [], historyIndex: -1, isOpen: false, init() { this.container = document.getElementById('terminal-container'); this.header = document.getElementById('terminal-header'); this.body = document.getElementById('terminal-body'); this.input = document.getElementById('terminal-input'); this.toggleBtn = document.getElementById('terminal-toggle-btn'); this.closeBtn = document.getElementById('terminal-close-btn'); this.bindEvents(); this.logOutput("Terminal JS pronto. Digite 'help()' para instruções."); this._makeDraggable(this.header, this.container); }, bindEvents() { this.toggleBtn.addEventListener('click', () => this.toggle()); this.closeBtn.addEventListener('click', () => this.close()); this.input.addEventListener('keydown', (e) => this.handleInput(e)); }, logOutput(message, className = '') { const p = document.createElement('p'); p.textContent = message; if (className) p.classList.add(className); this.body.appendChild(p); this.body.scrollTop = this.body.scrollHeight; // Scroll to bottom }, handleInput(e) { if (e.key === 'Enter') { const command = this.input.value.trim(); this.input.value = ''; if (command === '') return; this.logOutput(`> ${command}`); this.history.push(command); this.historyIndex = this.history.length; this.executeCommand(command); } else if (e.key === 'ArrowUp') { if (this.historyIndex > 0) { this.historyIndex--; this.input.value = this.history[this.historyIndex]; } e.preventDefault(); // Prevent cursor from moving to the beginning } else if (e.key === 'ArrowDown') { if (this.historyIndex < this.history.length - 1) { this.historyIndex++; this.input.value = this.history[this.historyIndex]; } else { this.historyIndex = this.history.length; this.input.value = ''; } e.preventDefault(); } }, async executeCommand(command) { try { if (command === 'help()') { this.logOutput('Comandos disponíveis:', 'warn'); this.logOutput(' MarcenariaApp.modulosDB - Objeto com todos os módulos salvos.'); this.logOutput(' MarcenariaApp.modulosProjeto - Array com os módulos no projeto atual.'); this.logOutput(' MarcenariaApp.exportarDB() - Exporta o DB para o console JS nativo (F12).'); this.logOutput(' MarcenariaApp.salvarModulosDB() - Força o salvamento do DB para storage.'); this.logOutput(' MarcenariaApp.carregarModulosDB() - Força o carregamento do DB do storage.'); this.logOutput(' clear() - Limpa a tela do terminal.'); this.logOutput(' Para inspecionar objetos, digite o nome da variável. Ex: MarcenariaApp.modulosProjeto'); this.logOutput(' Você pode executar qualquer código JS válido.'); return; } if (command === 'clear()') { this.body.innerHTML = ''; return; } let result; try { // console.log is global here, so logging results of eval is fine // eslint-disable-next-line no-eval result = eval(command); } catch (innerError) { result = innerError; } if (result !== undefined) { if (result instanceof Promise) { this.logOutput('Promise pendente...', 'warn'); result = await result; this.logOutput(`> (Resolved) ${JSON.stringify(result, null, 2)}`, 'ok'); } else if (typeof result === 'object' && result !== null) { this.logOutput(`> ${JSON.stringify(result, null, 2)}`, 'ok'); } else { this.logOutput(`> ${result}`, 'ok'); } } } catch (error) { this.logOutput(`Erro: ${error.message}`, 'error'); console.error(error); // Log to browser console too } }, toggle() { if (this.isOpen) { this.container.style.display = 'none'; this.toggleBtn.textContent = '⌨️'; } else { this.container.style.display = 'flex'; this.toggleBtn.textContent = '✕'; this.input.focus(); } this.isOpen = !this.isOpen; }, close() { this.container.style.display = 'none'; this.toggleBtn.textContent = '⌨️'; this.isOpen = false; }, _makeDraggable(handleElement, dragElement) { let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; handleElement.onmousedown = dragMouseDown; function dragMouseDown(e) { e = e || window.event; e.preventDefault(); pos3 = e.clientX; pos4 = e.clientY; document.onmouseup = closeDragElement; document.onmousemove = elementDrag; } function elementDrag(e) { e = e || window.event; e.preventDefault(); pos1 = pos3 - e.clientX; pos2 = pos4 - e.clientY; pos3 = e.clientX; pos4 = e.clientY; dragElement.style.top = (dragElement.offsetTop - pos2) + "px"; dragElement.style.left = (dragElement.offsetLeft - pos1) + "px"; } function closeDragElement() { document.onmouseup = null; document.onmousemove = null; } } } }; // --- BOOT LOADER LOGIC --- const bootLoader = { logElement: document.getElementById('boot-log'), progressBar: document.getElementById('progress-bar'), loaderContainer: document.getElementById('boot-loader'), loginWrapper: document.getElementById('login-wrapper'), appWrapper: document.getElementById('app-wrapper'), messages: [ { text: 'Initializing system modules... ', delay: 300 }, { text: 'Loading core components... ', delay: 200 }, { text: 'Checking file integrity... ', delay: 150, status: 'ok' }, { text: 'Mounting virtual file system... ', delay: 250, status: 'ok' }, { text: 'Detecting hardware configuration... ', delay: 180 }, { text: ' - RAM check: OK ', delay: 50, status: 'ok' }, { text: ' - Storage check: OK ', delay: 50, status: 'ok' }, { text: 'Loading user profiles... ', delay: 300 }, { text: 'Applying security patches... ', delay: 400, status: 'ok' }, { text: 'Connecting to local database... ', delay: 350 }, { text: 'Authenticating server connection... ', delay: 200, status: 'ok' }, { text: 'Starting Marcenaria Secure OS v11.7... ', delay: 500, status: 'ok' }, { text: 'Welcome, user.', delay: 200 } ], currentIndex: 0, init() { this.runBootSequence(); }, log(message, status = '') { const p = document.createElement('p'); p.textContent = message; if (status) { p.classList.add(status); } this.logElement.appendChild(p); this.logElement.scrollTop = this.logElement.scrollHeight; }, updateProgress(percentage) { this.progressBar.style.width = percentage + '%'; }, runBootSequence() { if (this.currentIndex < this.messages.length) { const msg = this.messages[this.currentIndex]; this.log(msg.text, msg.status); this.updateProgress((this.currentIndex + 1) / this.messages.length * 100); this.currentIndex++; setTimeout(() => this.runBootSequence(), msg.delay); } else { setTimeout(() => { this.loaderContainer.style.opacity = '0'; setTimeout(() => { this.loaderContainer.style.display = 'none'; this.loginWrapper.style.display = 'flex'; // Show login screen after boot }, 800); // Wait for fade-out transition }, 500); // Small delay after last message } } }; // --- GLOBAL INITIALIZATION AFTER DOM IS READY --- document.addEventListener('DOMContentLoaded', () => { // Initialize components SimulatedServer.init(); // Initialize client database MarcenariaApp.init(); // Initialize main application MarcenariaApp.terminal.init(); // Initialize terminal // Login screen logic const loginButton = document.getElementById('login-button'); const usernameInput = document.getElementById('username'); const passwordInput = document.getElementById('password'); const errorMessage = document.getElementById('error-message'); const generateBtn = document.getElementById('generate-btn'); const credentialsOutput = document.getElementById('credentials-output'); const clientNameInput = document.getElementById('client-name'); const logoutLink = document.getElementById('logout-link'); const renderUserList = () => { const userListUl = document.getElementById('user-list'); userListUl.innerHTML = ''; const users = SimulatedServer.getUsersWithDetails(); for (const user in users) { if (user === SimulatedServer.adminUser) continue; // Don't list admin const li = document.createElement('li'); li.innerHTML = ` <div class="user-info"> <strong>Usuário:</strong> ${user}<br> <strong>Senha:</strong> ${users[user].pass} </div> <button class="delete-btn" data-username="${user}">Excluir</button> `; userListUl.appendChild(li); } userListUl.querySelectorAll('.delete-btn').forEach(button => { button.addEventListener('click', (e) => { const usernameToDelete = e.target.dataset.username; if (confirm(`Tem certeza que deseja excluir o usuário "${usernameToDelete}"?`)) { SimulatedServer.deleteUser(usernameToDelete); renderUserList(); } }); }); }; MarcenariaApp.updateUserList = renderUserList; // Expose to MarcenariaApp loginButton.addEventListener('click', () => { const username = usernameInput.value; const password = passwordInput.value; const result = SimulatedServer.login(username, password); if (result.success) { errorMessage.textContent = ''; MarcenariaApp.loginSuccess(result.isAdmin); } else { errorMessage.textContent = result.message; } }); generateBtn.addEventListener('click', () => { const clientName = clientNameInput.value.trim(); if (clientName) { const credentials = SimulatedServer.generateCredentials(clientName); credentialsOutput.style.display = 'block'; credentialsOutput.innerHTML = ` <h4>Credenciais Geradas:</h4> <p><strong>Usuário:</strong> ${credentials.username}</p> <p><strong>Senha:</strong> ${credentials.password}</p> <p><em>Anote e forneça ao cliente.</em></p> `; clientNameInput.value = ''; renderUserList(); } else { alert('Por favor, digite o nome do cliente.'); } }); logoutLink.addEventListener('click', () => { MarcenariaApp.logout(); }); // Start the boot sequence bootLoader.init(); }); 
